// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prettier-lpc plugin fluffos text formatting shortcuts (@): textFormattingDouble 1`] = `
"void test() {
  set_desc(@@TXT
This is
  a tes
TXT
  );
}"
`;

exports[`prettier-lpc plugin fluffos text formatting shortcuts (@): textFormattingSingle 1`] = `
"void test() {
  set_desc(@TXT
This is
  a test
TXT
  );
}"
`;

exports[`prettier-lpc plugin format arrays: array-condensed 1`] = `"test() { items = ({({"gates", "steel gates"}), "Strong metal gates."}); }"`;

exports[`prettier-lpc plugin format arrays: array-inner-condensed 1`] = `
"test() {
  items = ({
    ({"gates", "steel gates"}),
    "Strong metal gates.",
  });
}"
`;

exports[`prettier-lpc plugin format arrays: array-none-condensed 1`] = `
"test() {
  items = ({
    ({
      "gates",
      "steel gates",
    }),
    "Strong metal gates.",
  });
}"
`;

exports[`prettier-lpc plugin format arrays: array-with-multi-sfx-comments 1`] = `
"
test() {
  items = ({
    ({"gates", "steel gates"}),
    "Strong metal gates.", // inner sfx
  }); // sfx
  // post
}"
`;

exports[`prettier-lpc plugin format arrays: array-with-sfx-comment 1`] = `
"
test() {
  items = ({({"gates", "steel gates"}), "Strong metal gates."}); // sfx
}"
`;

exports[`prettier-lpc plugin format arrow operators: arrow-newline-after 1`] = `
"test() {
  "/obj/master"->query_player_exists();
}"
`;

exports[`prettier-lpc plugin format assignment expressions: assign_exp_suffix_comment 1`] = `
"test() {
  exits = room->exits();
  if (exits == -1) arr = ([]); // erase all exits
  else if (stringp(exits)) arr -= ([exits]);
}"
`;

exports[`prettier-lpc plugin format assignment expressions: assignment_inside_array 1`] = `
"int i = 0;
test() { indices = ({i, index++}); }"
`;

exports[`prettier-lpc plugin format binary expressions: call-exp-inside-binary-string-exp 1`] = `
"string test() {
  string name = query_name();
  return name + " was defeated by " + "/daemons/time_d"->query_time() + ".
";
}"
`;

exports[`prettier-lpc plugin format call-exp inside arrays: call-exp-in-array 1`] = `
"#define SOME_DEFINE "some define"

void somefunc() {
  string *words;
  words = ({SOME_DEFINE, lower_case(SOME_DEFINE), upper_case(SOME_DEFINE)});
}"
`;

exports[`prettier-lpc plugin format closures: closure-greaterthan-this_player 1`] = `
"test() {
  object *hash = ({});
  hash = sort_array(hash, #'>);
  hash = filter(hash, #'this_player);
}"
`;

exports[`prettier-lpc plugin format foreach loops: foreach-collapsed 1`] = `
"test() {
  string exitKey;
  foreach (exitKey : all_exits) { write(exitKey); }
}"
`;

exports[`prettier-lpc plugin format foreach loops: foreach-multi-var 1`] = `"test() { foreach (x, y : a) { z = b[x]; } }"`;

exports[`prettier-lpc plugin format foreach loops: foreach-multi-var-keep-in 1`] = `"test() { foreach (x, y in a) { z = b[x]; } }"`;

exports[`prettier-lpc plugin format foreach loops: foreach-multiline 1`] = `
"test() {
  string exitKey;
  foreach (exitKey : all_exits) {
    write(exitKey);
    i++;
  }
}"
`;

exports[`prettier-lpc plugin format foreach loops: foreach-range-collapsed 1`] = `
"test() { foreach (i : 1 .. 6) printf("%d
", i); }"
`;

exports[`prettier-lpc plugin format foreach loops: foreach-range-multiline 1`] = `
"test() {
  foreach (i : 1 .. 6) {
    printf("%d
", i);
    j++;
  }
}"
`;

exports[`prettier-lpc plugin format functions: function-stub-with-newline-comments 1`] = `
"int gmcp_send_map();
int gmcp_send_map_config();

/* Should not move the coment up after the semi */"
`;

exports[`prettier-lpc plugin format functions: function-stubs 1`] = `
"int level = 0;
public int query_level();
public void set_level(int level);
public int query_next_level();
public int query_level() { return level; }"
`;

exports[`prettier-lpc plugin format literal strings: literal_consecutive_strings 1`] = `
"test() {
  desc =
    "this is line one. it is the first line in the description
" +
    "this is line 2.
" +
    "this is line 3.";

  desc =
    "this is line one. it is the first line in the description
" +
    "this is line 2.
" +
    "this is line 3.";
}"
`;

exports[`prettier-lpc plugin format macros: define-macro-multiline 1`] = `
"#define W2(s) \\
  trim("local/really really really long string really really really really long/util")->       wrap(({ a, s }))"
`;

exports[`prettier-lpc plugin format macros: define-macro-with-wrap 1`] = `
"#define WRAP(str) \\
  trim("really really really really long string"->word_wrap(str), 2)"
`;

exports[`prettier-lpc plugin format ternary expressions: mapping_with_ternary_value 1`] = `
"/**
* send data */
public varargs int send_config(object player) {
  mixed *arr = ({}); // array of environment data objects

  mapping data = MASTER->query_data();
  if (!data) {
    write("WARN: Could not load");
  }
  foreach (string nm : data) {
    int id = data[nm, 0];
    mapping d = ([
      ID:
        id ? id : "0", // need string zero, not int 0
      NAME: nm,
      C: data[nm, 1],
    ]);

    arr += ({d});
  }

  // package
  mapping pkg = ([KEY: arr]);

  object p = player ? player : this_player();
  return p->send(PKG, pkg);
}"
`;

exports[`prettier-lpc plugin format ternary expressions: ternary_arith_op_inside 1`] = `
"private int round(float n) {
  int i = (int)(n < 0 ? n - 0.5 : n + 0.5);
  return i;
}"
`;

exports[`prettier-lpc plugin format ternary expressions: ternary-after-binary 1`] = `
"test() {
  str = (str[0] == '/' ? "/" + implode(path, "/") : implode(path, "/"));
}"
`;

exports[`prettier-lpc plugin format ternary expressions: ternary-with-lit-binary-op 1`] = `
"test() {
  set_long(
    "The " + race_arr[race] +
    " looks at " + (gender == 1 ? "him" : "her") +
    "."
  );
}"
`;

exports[`prettier-lpc plugin formats for loops: for_loop_various 1`] = `
"test() {
  for (int i=0,j=1;i<10;i++,j+=2) { fn(i,j); }
  for (int i=0,j=1;i<10;) { fn(i,j); }
  int i;
  for (i=0;i<10;i--) { fn(i); }
}"
`;

exports[`prettier-lpc plugin formats for loops: for-loop_multi_expression 1`] = `
"test() {
  for (i = 0, j = sizeof(keys); i < j; i++, j--) { string key = keys[i]; }
}"
`;

exports[`prettier-lpc plugin formats for loops: loop-break-shouldhave-semi 1`] = `"void test() { while (true) { if (1 == 1) break; } }"`;

exports[`prettier-lpc plugin formats for loops: loop-continue-shouldhave-semi 1`] = `"void test() { while (true) { if (1 == 1) continue; } }"`;

exports[`prettier-lpc plugin formats if statements: if_condense_test 1`] = `
"test() {
  // this should be fairly condensed
  if (
    str != "down" && str != "up" && str != "hole" && str != "hill" &&
    str != "mountain"
  ) return 0;
  else if (str == "sky") {
    // send them
    move_player("sky");
    return 1;
  } else return 0;
}"
`;

exports[`prettier-lpc plugin formatter should handle missing semi's: missing_semi_comma_instead 1`] = `
"test() {
  short = "short name";
  long = "long" + "desc";
}"
`;

exports[`prettier-lpc plugin general formatting: spec_input_room 1`] = `
"#include "../globals.h"
inherit "/room/room";

object monster;

reset(arg) {
  if (!arg) {
    set_light(1);
    set_realm("something");
    short_desc = "Room";
    long_desc =
      "This is a long
" +
      "Room description that goes
" +
      "on for several lines
";
    items = ({
      ({"table", "small table", "wood table"}),
      "A table made of wood",
      ({"bench", "wood bench"}),
      "A bench made of wood",
    });

    dest_dir = ({
      BASE + "/northroom",
      "north",
    });
  }

  if (!present("monster")) {
    monster = clone_object("obj/monster");
    monster->set_name("monster");
    monster->set_alias(({"monster"}));
    monster->set_hp(200);
    move_object(monster, this_object());
  }
}"
`;

exports[`prettier-lpc plugin handle string literals with escaped quotes: literal_strings_multiple_escapes 1`] = `"string s = "testing\\" 123\\\\";"`;

exports[`prettier-lpc plugin handles the spread operator (FluffOS): spread-op-function-and-callexp 1`] = `
"mixed sum(mixed *numbers...) {
  mixed number, result = 0;
  fn(1, numbers...);
  return result;
}"
`;
